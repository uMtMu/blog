#+INCLUDE: "baslik.org"
* Elisp
  [[https://www.youtube.com/watch?v=CH0RUrO_oww&t=68s][Kaynak]]
** 1.ders
  #+BEGIN_SRC emacs-lisp
    (+ 2 5 34 32 (/ 22 3))

    (defun add-nums (a b c)
    (+ a b c)
    )

    (add-nums 10 23)

    ;; test lib
    (require 'ert)
    (ert-deftest add-nums-pos () 
      should (equal (add-nums-pos 11 10) 21))
    ;; M - x ert

  #+END_SRC
** 2.ders
   #+BEGIN_SRC emacs-lisp
     (org-src-debug)
     (setq a 10 b 32)
     (+ a b)
     (null nil)

     '(1 2 3 4)
     (equal nil '())
     (setq my_list '(1 2 3 4))
     (car my_list)
     (cdr my_list)
     (nth 0 my_list)
     (member 4 my_list)
     (defun does_exist (number my-list)
       (
        (member number my-list)))

     (require 'ert)
     (ert-deftest check-number
         ((should (does_exist 1 '(1 2 3 4)) )
          )
       
       (ert-deftest check-number
           ((should (not (does_exist 5 '(1 2 3 4)) ))
            )
         )
       
       (ert-deftest check-number ()
         (should (does_exist 1 '(1 2 3 4)))
         (should (not (does_exist 5 '(1 2 3 4))))
         )
       
   #+END_SRC
** 3.ders
   #+BEGIN_SRC emacs-lisp
     (setq my_list '(1 2 3 4))
     ;; loop through list and print even number
     (dolist (elm my_list)
       (when (= (mod elm 2) 0) 
         (print elm) ;; writes to mini buffer
         (message (number-to-string elm)) ;; durumu tam anlamadım
         ))
     (let (some-var) ;; sets scope, some-var will work only in let
       (when (null some-var)
         (message "var is null") 
         ))

     (let ((some-var 0)
           (other-var 99))
       (if (null some-var)
           (message "null")
         (message "not null")
         ))

     (defun sum-evens (some-list)
       (let ((sum 0))
         (dolist (elm some-list)
           (when (= (mod 2 elm))
             (setq sum (+ sum elm))))
         (message (number-to-string sum))
         ))
     (sum-evens '(1 2 3 4))
   #+END_SRC

   #+RESULTS:
   : 10

** 4.ders
   #+BEGIN_SRC emacs-lisp
     ;; C-h f get help for function
     ;; C-h k get help for key
     (defun cheap-count-words ()
       (interactive)
       (let ((words 0))
         (save-excursion ;; imlecin son yerini hatırla
           (goto-char (point-min)) ;; buffer'ın en başına gel
           (while (forward-word) ;; bir kelime ilerle
             (setq words (+ 1 words)))
           (message (format "Words in buffer: %s" words))
           words)) ;; sadece let çalıştığı zaman fonksiyon hata veriyor. words'ü de yazdırıyoruz ??
       )


     (require 'ert)
     (ert-deftest count-words-test ()
       (get-buffer-create "*test*") ;; bu isimli buffer yoksa oluştur
       (with-current-buffer "*test*"
         (erase-buffer)
         (insert "Hello Worlds") ;; buffera yaz
         (should (= (cheap-count-words) 2))
         )
       (kill-buffer "*test*")
       )

     ;; C-x C-e M-x ert 

   #+END_SRC
* Okunacak
  - http://wiki.c2.com/?GreatEmacsFeatures
  - http://batsov.com/articles/2011/11/19/why-emacs/
  - https://www.emacswiki.org/emacs/EmacsNiftyTricks
  - https://www.masteringemacs.org/reading-guide
* Artist mode - Ascii/Diagram çizimi
  #+BEGIN_EXAMPLE
  M-x artist-mode
  #+END_EXAMPLE
  
  mouse tekerlek tuşu menüyü açıyor. gerisi anlaşılır zaten :D
* orgmode hedefli dosya bağlantıları
  #+BEGIN_EXAMPLE
  [[file:~/code/main.c::255]]                 Find line 255
  [[file:~/xx.org::My Target]]                Find ‘<<My Target>>’
  [[file:~/xx.org::#my-custom-id]]            Find entry with custom id
   #+END_EXAMPLE

* GnuPG
  - Kurulum
    sudo apt-get install gnupg2
    sudo apt-get install kleopatra # arayüz
  - Key oluşturma
    gpg --gen-key # eposta adresi önemli. Keyringde belirleyici olacak
  - .emacs ayarlar
    (require 'epa-file)
    (epa-file-enable)
  - orgmode kullanımı
    Dosya uzantısı gpg (*.gpg) olan dosyanın ilk satırına
    # -*- mode:org; epa-file-encrypt-to: ("me@mydomain.com") -*-
    eklenecek
  - Oluşturulan anahtar dosyasının taşıma amaçlı çıkarılması (Export)
    gpg --armor --export me@mydomain.com > mykey.asc
  - Çıkarılan anahtarın eklenmesi (Import)
    gpg --import mykey.asc 
* MoveIt
  Numerik tekrarlama
  (C|M)-Num Komut örneği C-5 C-f
  
  | Komut | Boyut    | Yöne  |
  | C-f   | Karakter | İleri |
  | C-b   | Karakter | Geri  |
  | C-n   | Satır    | İleri |
  | M-f   | Kelime   | İleri |
  | C-p   | Satır    | Geri  |
  | M-f   | Kelime   | İleri |
  | M-b   | Kelime   | Geri  |
  | M-v   | Paragraf | İleri |
  | C-v   | Paragraf | Geri  |
  | M-<   | Buffer   | Tepe  |
  | M->   | Buffer   | Dip   |

* SpacEmacs & ErgoEmacs
  Bana fazla karışık geldi. Sıfırdan kendin kurup neyin ne olduğunu bilmek daha güzel geliyor. Tabi ne var ne yok görmek için iyi oldu.
  [[https://github.com/syl20bnr/spacemacs][SpacEmacs]] & [[http://ergoemacs.org/][ErgoEmacs]]
* orgmode easy templates

  | 1. | 2.  | Sonuç                             |
  | <s | TAB | #+BEGIN_SRC ... #+END_SRC         |
  | <e | TAB | #+BEGIN_EXAMPLE ... #+END_EXAMPLE |
  | <q | TAB | #+BEGIN_QUOTE ... #+END_QUOTE     |
  | <v | TAB | #+BEGIN_VERSE ... #+END_VERSE     |
  | <c | TAB | #+BEGIN_CENTER ... #+END_CENTER   |
  | <l | TAB | #+BEGIN_LaTeX ... #+END_LaTeX     |
  | <L | TAB | #+LaTeX:                          |
  | <h | TAB | #+BEGIN_HTML ... #+END_HTML       |
  | <H | TAB | #+HTML:                           |
  | <a | TAB | #+BEGIN_ASCII ... #+END_ASCII     |
  | <A | TAB | #+ASCII:                          |
  | <i | TAB | #+INDEX: line                     |
  | <I | TAB | #+INCLUDE: line                   |
   
* Orgmode metin stilleri
  | _ | _metin stili_ |
  | / | /metin stili/ |
  | * | *metin stili* |
  | ~ | ~metin stili~ |
  | = | =metin stili= |
  | + | +metin stili+ |

* Elpy kısayollar
  | M - .       | Tanımlanan noktaya git        |
  | M - *       | M - . ya geri dön             |
  | C - c C - o | Fonsiyon ve sınıfları listele |

* Kaydedilmemiş değişiklikler
  C-x s kombinasyonu ile toplu tampon kayıtlarında "d" tuşu ile değişiklikler
  görülebilir. 
* multiple replace on fly						:Ara:
  Değiştirilen kelimenin her bir kopyasının aynı anda güncellenmesi
* .emacs
* ipuçları
** List occurence
   M - s o -> list occurence
   M - s o RET def RET -> list functions
   M - s o RET class RET -> list classes
** conf-mode
** Template kısayolları
| 1. | 2. | 3.  | Sonuç                             |
| <  | s  | TAB | #+BEGIN_SRC ... #+END_SRC         |
| <  | e  | TAB | #+BEGIN_EXAMPLE ... #+END_EXAMPLE |
| <  | q  | TAB | #+BEGIN_QUOTE ... #+END_QUOTE     |
| <  | v  | TAB | #+BEGIN_VERSE ... #+END_VERSE     |
| <  | c  | TAB | #+BEGIN_CENTER ... #+END_CENTER   |
| <  | l  | TAB | #+BEGIN_LaTeX ... #+END_LaTeX     |
| <  | L  | TAB | #+LaTeX:                          |
| <  | h  | TAB | #+BEGIN_HTML ... #+END_HTML       |
| <  | H  | TAB | #+HTML:                           |
| <  | a  | TAB | #+BEGIN_ASCII ... #+END_ASCII     |
| <  | A  | TAB | #+ASCII:                          |
| <  | i  | TAB | #+INDEX: line                     |
| <  | I  | TAB | #+INCLUDE: line                   |
** Registerlar
   *C-x r s r*
   Copy region into register r (copy-to-register).
   
   *C-x r i r*
   Insert text from register r (insert-register).
   
   *M-x append-to-register RET r*
   Append region to text in register r.
   When register r contains text, you can use C-x r + (increment-register) to append to that register. Note that command C-x r + behaves differently if r contains a number. See Number Registers.
   
   *M-x prepend-to-register RET r*
   Prepend region to text in register r.
* ElPy
  1. Reponun eklenmesi
     #+BEGIN_SRC elisp
     (require 'package)
     (add-to-list 'package-archives
             '("elpy" . "http://jorgenschaefer.github.io/packages/"))
     #+END_SRC
  2. Paketin yüklenmesi
     M-x package-install RET elpy
  3. Paketin aktifleştirilmesi
     #+BEGIN_SRC elisp
     (package-initialize)
     (elpy-enable)
     #+END_SRC
  4. Paketin yapılandırılması
     M-x elpy-config RET
* Bağlantılar
#+INCLUDE: "baglantilar.org"
