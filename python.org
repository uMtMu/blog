#+INCLUDE: "baslik.org"
* Notlarım
** 7 simple tricks to write better Python
   - dict.get(key, if_not_exists)
   - for else -> bitirdiysen çalıştır
   - with -> context managers
   - try:
     except:
     else:
** Python OOP
*** 
    | class          |   | instance          |
    | varible        | X | variable          |
    | selfsiz        |   | selfli            |
    | class.__dict__ |   | instance.__dict__ |
    | classname.var  |   | self.var          |
***    
    isinstance(x, y)
    issubclass(x, y)
*** @classmethod instance metodlarında otomatik olarak ilk parametre instance olur. Bu decorator ile class gelir. def set_raise_amt(cls, amount):
        cls.raise_amt = amount
*** @staticmethod
    Sınıfla ilgili ancak instance  ya da class referansına ihtiyaç duymayan metodlar.
    
    *(ÖRNEK)*
** Property Decorators
   #+BEGIN_SRC python
   

   @property def fullname(self):
       return '{} {}'.format(self.first, self.last)

   @fullname.setter def fullname(self, name):
       first, last = name.split(' ')
       self.first = first self.last = last

    @fullname.deleter def fullname(self, name):
        print('Delete name!')
	self.first = None self.last = None del emp1.fullname
   #+END_SRC
** Special (Magic/Dunder) Methods
   | =__init__=     |   |
   | =__repr__=     |   |
   | =__str__=      |   |
   | =__add__=      |   |
   | =__len__=      |   |
   | =__iter__=     |   |
   | =__next__=     |   |
   | =__reversed__= |   |
   | =__getattr__=  |   |
   | =__setattr__=  |   |
   | =__delattr__=  |   |
   | vs             |   |
** try/except
   #+BEGIN_SRC python try:
       f = open('file.txt')
   except FileNotFoundError as e:
       print(e)
   except Exception as e:
       print(e)
   else:
       print(f.read())
       f.close()
   finally:
       print('Executing finally!')
   #+END_SRC
** namedtuple
   #+BEGIN_SRC python

   
   >>> Point = namedtuple('Point', ['x', 'y'], verbose=True)
   >>> p = Point(11, y=22)
   >>> p[0] + p[1]
   33
   >>> p.x + p.y
   333
   >>> x, y = p
   >>> x + y
   33
   #+END_SRC
* Best Practice
** [[https://gist.github.com/sloria/7001839][Kaynak]]
   
** Values
   - "Build tools for others that you want to be built for you." - Kenneth Reitz
   - "Simplicity is alway better than functionality." - Pieter Hintjens
   - "Fit the 90% use-case. Ignore the nay sayers." - Kenneth Reitz
   - "Beautiful is better than ugly." - PEP 20
** General Development Guide
   - "Explicit is better than implicit" - PEP 20
   - "Readability counts." - PEP 20
   - "Anybody can fix anything." - Khan Academy Development Docs
   - Fix each broken window (bad design, wrong decision, or poor code) as soon as it is discovered.
   - "Now is better than never." - PEP 20
** Naming

   - Variables, functions, methods, packages, modules
     - lower_case_with_underscores
   - Classes and Exceptions
     - CapWords
   - Protected methods and internal functions
     - _single_leading_underscore(self, ...)
   - Private methods
     - __double_leading_underscore(self, ...)
   - Constants
     - ALL_CAPS_WITH_UNDERSCORES
*** Mindset
**** 
    - Fine
      
      - for e in elements:
          e.mutate()
        Avoid redundant labeling.

    - Yes

      - import audio core = audio.Core()
        controller = audio.Controller()
    - No

      - import audio core = audio.AudioCore()
        controller = audio.AudioController()
**** Prefer ReverseNotation
    - Yes 
      
      - elements = ... elements_active = ... elements_defunct = ...
    
    - No

      - elements = ... active_elements = ... defunct_elements ...
**** Avoid getter and setter methods.

     - Yes
       - person.age = 42
     - No
       - person.set_age(42)
*** Imports
    - Yes

      - import canteen import canteen.sessions from canteen import sessions
    - No

      - from canteen import get_user  # Symbol from canteen/__init__.py from canteen.sessions import get_session  # Symbol from canteen/sessions.py

** Documentation

*** Multi Line
    - Summary line
    - Use case, if appropriate
    - Args
    - Return type and semantics, unless None is returned

      """Train a model to classify Foos and Bars.
      Usage::
      
      >>> import klassify
      >>> data = [("green", "foo"), ("orange", "bar")]
      >>> classifier = klassify.train(data)
      
      :param train_data: A list of tuples of the form ``(color, label)``.
      
      :rtype:    A :class:`Classifier <Classifier>`
      """

*** On comment
    - No

      - # If the sign is a stop sign if sign.color == 'red' and sign.sides == 8:
            stop()
    - Yes

      - def is_stop_sign(sign):
            return sign.color == 'red' and sign.sides == 8

        if is_stop_sign(sign):
            stop()

* VirtualEnv pyvenv-3.5 virtenv_name
* Blog https://pythondefterim.wordpress.com/
* Bağlantılar
#+INCLUDE: "baglantilar.org"
